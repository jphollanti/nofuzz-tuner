name: Rust WASM CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - uses: actions/checkout@v3

      # Install system dependencies for ALSA
      - name: Install ALSA library
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev
          
      # Install the latest Rust stable toolchain + components
      - name: Set up Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true  # Make this toolchain default

      # Show cargo version (just for logging)
      - name: Check Cargo version
        run: cargo --version

      # Check formatting
      - name: Check formatting with rustfmt
        run: cargo fmt -- --check

      # Run clippy linter
      - name: Lint with clippy
        run: cargo clippy --all-features --all-targets -- -D warnings

      # Run tests
      - name: Run tests
        run: cargo test --all-features --all-targets

      # Install wasm-pack
      - name: Install wasm-pack
        run: cargo install wasm-pack

      # Build your WASM package
      - name: Build with wasm-pack
        working-directory: nofuzz_tuner_lib
        run: wasm-pack build --release --target web

      # Move the generated WASM package to the frontend directory
      - name: Move WASM package
        run: |
          rm -rf nofuzz-tuner-frontend/src/lib/no_fuzz_tuner
          mkdir -p nofuzz-tuner-frontend/src/lib/no_fuzz_tuner/pkg
          cp -r nofuzz_tuner_lib/pkg nofuzz-tuner-frontend/src/lib/no_fuzz_tuner

      
      # BUILD FRONTEND
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install frontend dependencies
        working-directory: nofuzz-tuner-frontend
        run: npm ci

      - name: Build frontend
        working-directory: nofuzz-tuner-frontend
        run: npm run build

      # Upload the build folder as an artifact for the next job
      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: nofuzz-tuner-frontend/build
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    steps:
      # Download the artifact created by the build job
      - uses: actions/download-pages-artifact@v3

      # Deploy to GitHub Pages
      - name: Deploy to Pages
        uses: actions/deploy-pages@v3